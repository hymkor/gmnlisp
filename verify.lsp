(let ((tmpdir (and (consp *argv*) (car *argv*)))
      (codes (list 'progn)))
  (if (or (null tmpdir) (string= tmpdir ""))
    (setq tmpdir nil)
    (let* ((tail (elt tmpdir (- (length tmpdir) 1))))
      (if (and (not (equal tail #\/)) (not (equal tail #\\)))
        (setq tmpdir (string-append tmpdir "/")))))
  (with-open-input-file
    (fd "tp.lsp")
    (let ((code1 nil))
      (while (setq code1 (read fd nil nil))
        (if (and tmpdir
                 (listp code1)
                 (= (length code1) 3)
                 (equal (elt code1 0) 'defconstant)
                 (equal (elt code1 1) '*tp-tmp-dir*))
          (setq code1 (list 'defconstant '*tp-tmp-dir* tmpdir)))
        (setq codes (cons code1 codes)))
      )
    )
  (setq codes (nreverse codes))
  (eval codes)
  )
(let ((options
        (mapcar (lambda (s)
                  (let ((reader (create-string-input-stream s)))
                    (read reader nil nil))) *argv*)))
  (apply #'tp-all options))
