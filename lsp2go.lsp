(defun to-safe (s)
  (let ((index nil))
    (while (and s (setq index (string-index "-" s)))
      (setq s (string-append (subseq s 0 index)
                             "_"
                             (subseq s (+ index 1) (length s))))
      )
    s))
(defun defun2lambda (node)
  (if (consp node)
    (case (car node)
      (('defun)
       (set-car 'lambda node)
       (let ((name (elt node 1)))
         (set-cdr (cdr (cdr node)) node)
         name)
       )
      (('defmacro)
       (set-car 'lambda-macro node)
       (let ((name (elt node 1)))
         (set-cdr (cdr (cdr node)) node)
         name)
       )
      (t
        (or (defun2lambda (car node))
            (defun2lambda (cdr node))))
      )
    )
  )

(let ((node nil) (found nil) (keyword nil) (name nil) (safename nil))
  (format t "package ~a~%" (car *posix-argv*))
  (let ((e (cdr *posix-argv*)))
    (format t "~%// This code is generated by lsp2go.lsp")
    (while e
      (format t " ~a" (car e))
      (setq e (cdr e))
      )
    (format t "~%")
    )
  (while (setq node (read (standard-input) nil nil))
    (setq name (defun2lambda node))
    (if name
      (progn
        (setq safename (string-append "embed_" (to-safe (convert name <string>))))
        (format t "~%// NewSymbol(\"~s\"): ~a,~%"
                name
                safename)
        (format t "var ~a = &LispString{S: `~a`}~%"
                safename
                (format nil "~s" node))
        )
      )
    )
  )
; vim:set lispwords+=while:
