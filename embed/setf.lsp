(let ((setf-table
        '((car . set-car)
          (cdr . set-cdr)
          (elt . set-elt)
          (dynamic . set-dynamic)
          (subseq . set-subseq)
          (setq . set-setq)
          (assoc . set-assoc)
          (aref . set-aref)
          (cddr . set-cddr)
          (cdddr . set-cdddr)
          (cadr . set-cadr)
          (caddr . set-caddr)
          (cadddr . set-cadddr)
          (first . set-car)
          (second . set-cadr)
          (third . set-caddr)
          (gethash . set-gethash))))
  (lambda-macro
    (expr newvalue)
    (setq expr (macroexpand expr))
    (if (symbolp expr)
      `(setq ,expr ,newvalue)
      (let* ((name (car expr))
             (pair (assoc name setf-table))
             (tmp nil)
             (setter (if pair
                       (cdr pair)
                       (progn
                         (setq tmp (convert
                                     (string-append "set-" (convert name <string>))
                                     <symbol>))
                         (setq setf-table (cons (cons name tmp) setf-table))
                         tmp)))
             (arguments (cdr expr)))
        (cons setter (cons newvalue arguments))))))
