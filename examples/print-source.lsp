(labels
  ((print-lines
     (node indent argc)
     (let ((L (car node)))
       (format t "(~s" L)
       (while (setq node (cdr node))
         (unless (equal L ',)
           (if (plusp argc)
             (progn (decf argc) (format t " "))
             (format t "~%~a" (string-append "  " indent))))
         (print (setq L (car node)) (string-append "  " indent)))
       (format t ")")))
   (print-cond
     (node indent argc)
     (format t "(~s" (car node))
     (while (setq node (cdr node))
       (if (plusp argc)
         (progn
           (decf argc)
           (format t " ~s" (car node)))
         (progn
           (format t "~%~a" (string-append "  " indent))
           (print-lines (car node) (string-append "  " indent) 0))))
     (format t ")"))
   (print-flet
     (node indent)
     (format t "(~s" (car node))
     (let ((dem "~%~a("))
       (dolist (func1 (cadr node))
         (format t dem (string-append "  " indent))
         (print-lines func1 (string-append "  " indent) 1)
         (setq dem "~%~a")))
     (format t ")~%~a" (string-append "  " indent))
     (dolist (e (cddr node))
       (print e (string-append "  " indent)))
     (format t ")"))
   (print
     (node indent)
     (if (not (consp node))
       (format-object t node t)
       (case (car node)
         (('progn)
          (print-lines node indent 0)
          )
         (('case)
          (print-cond node indent 1)
          )
         (('cond)
          (print-cond node indent 0)
          )
         (('labels 'flet)
          (print-flet node indent)
          )
         (('let 'let* 'lambda 'lambda-macro
           'if 'while 'dolist 'unless 'or)
          (print-lines node indent 1)
          )
         (('defun 'defmacro)
          (print-lines node indent 2)
          )
         (('backquote)
          (format t "`")
          (print-lines (cadr node) indent 0)
          )
         (('function)
          (format t "#'~s" (cadr node)))
         (t
           (print-lines node indent 99999)
           )
         )))
   (print-source
     (fd)
     (let (node)
       (while (setq node (read fd nil nil))
         (print node "")
         (format t "~%"))
       )))
  (if *posix-argv*
    (dolist (fname *posix-argv*)
      (with-open-input-file
        (fd fname)
        (print-source fd)))
    (print-source (standard-input))))
