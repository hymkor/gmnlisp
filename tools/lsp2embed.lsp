(defun string-replace (source from to)
  (let ((index nil) (buffer (create-string-output-stream)))
    (while (setq index (string-index from source))
      (format-object buffer (subseq source 0 index) nil)
      (format-object buffer to nil)
      (setq source (subseq source (+ index (length from)) (length source))))
    (format-object buffer source nil)
    (get-output-stream-string buffer)))

(defun to-safe (s)
  (string-replace (s "-" "_")))

(defun to-s (s)
  (let ((buffer (create-string-output-stream)))
    (format-object buffer s t)
    (get-output-stream-string buffer)))

(defun to-go-string (source)
  (let ((s (to-s (to-s source))))
    (subseq s 1 (- (length s) 1))))

(defun defun2lambda (node)
  (if (consp node)
    (case (car node)
      (('defun)
       (set-car 'lambda node)
       (let ((name (elt node 1)))
         (set-cdr (cdr (cdr node)) node)
         (convert name <string>))
       )
      (('defmacro)
       (set-car 'lambda-macro node)
       (let ((name (elt node 1)))
         (set-cdr (cdr (cdr node)) node)
         (convert name <string>))
       )
      (t
        (or (defun2lambda (car node))
            (defun2lambda (cdr node))))
      )
    )
  )

(let ((node nil)(name nil)(funcs nil)(max 0))
  (while (setq node (read (standard-input) nil nil))
    (when (setq name (defun2lambda node))
      (setq funcs (cons (cons name node) funcs))
      (let ((L (length name)))
        (if (> L max)
          (setq max L)))))
  (setq funcs (nreverse funcs))
  (dolist (pair funcs)
    (setq name (car pair))
    (setq node (cdr pair))

    (let* ((fname (format nil "embed/~a.lsp" name))
           (w (open-output-file fname)))
      (format w "~s~%" node)
      (close w))
    )
  )
