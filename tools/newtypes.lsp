(let ((b (standard-output))
      (package-name (car *posix-argv*))
      (arguments (cdr *posix-argv*)))
  (format b "package ~a~%" package-name)
  (format b "~%")
  (format b "import (~%")
  (format b "~a\"context\"~%" #\tab)
  (format b "~a\"io\"~%" #\tab)
  (format b ")~%")
  (dolist (theType arguments)
    (format b "~%")
    (format b "func (t ~a) Eval(context.Context, *World) (Node, error) {~%" theType)
    (format b "~areturn t, nil~%" #\tab)
    (format b "}~%")
    (format b "~%")
    (format b "func (t ~a) Equals(Node, EqlMode) bool {~%" theType)
    (format b "~areturn false~%" #\tab)
    (format b "}~%")
    (format b "~%")
    (format b "func (t ~a) PrintTo(w io.Writer, m PrintMode) (int, error) {~%" theType)
    (format b "~areturn io.WriteString(w, \"(~a)\")~%" #\tab theType)
    (format b "}~%")
    )
  )
