package gmnlisp

import (
	"math"
	"os"
)

var autoLoadConstants = Constants{
	// *sort*start*
	NewReserved("*most-negative-fixnum*"): Integer(math.MinInt),
	NewReserved("*most-negative-float*"):  Float(-math.MaxFloat64),
	NewReserved("*most-positive-fixnum*"): Integer(math.MaxInt),
	NewReserved("*most-positive-float*"):  Float(math.MaxFloat64),
	NewReserved("*pi*"):                   Float(math.Pi),
	NewSymbol("*err-exist*"):              ErrorNode{Value: os.ErrExist},
	NewSymbol("*err-not-exist*"):          ErrorNode{Value: os.ErrNotExist},
	NewSymbol("*err-too-few-arguments*"):  ErrTooFewArguments,
	NewSymbol("*err-too-many-arguments*"): ErrTooManyArguments,
	NewSymbol("*err-too-short-tokens*"):   ErrorNode{Value: ErrTooShortTokens},
	// *sort*end*
}

var autoLoadFunc = Functions{
	// *sort*start*
	NewReserved("and"):                          SpecialF(cmdAnd),
	NewReserved("assure"):                       SpecialF(cmdAssure),
	NewReserved("block"):                        SpecialF(cmdBlock),
	NewReserved("case"):                         SpecialF(cmdCase),
	NewReserved("catch"):                        SpecialF(cmdCatch),
	NewReserved("class"):                        SpecialF(cmdClass),
	NewReserved("cond"):                         SpecialF(cmdCond),
	NewReserved("convert"):                      SpecialF(cmdConvert),
	NewReserved("dynamic"):                      SpecialF(cmdDynamic),
	NewReserved("dynamic-let"):                  SpecialF(cmdDynamicLet),
	NewReserved("flet"):                         SpecialF(cmdFlet),
	NewReserved("function"):                     SpecialF(cmdFunction),
	NewReserved("go"):                           SpecialF(cmdGo),
	NewReserved("if"):                           &SpecialN{F: cmdIf, Min: 2, Max: 3},
	NewReserved("ignore-errors"):                SpecialF(cmdIgnoreErrors),
	NewReserved("labels"):                       SpecialF(cmdLabels),
	NewReserved("lambda"):                       SpecialF(cmdLambda),
	NewReserved("let"):                          SpecialF(cmdLet),
	NewReserved("let*"):                         SpecialF(cmdLetX),
	NewReserved("or"):                           SpecialF(cmdOr),
	NewReserved("progn"):                        SpecialF(cmdProgn),
	NewReserved("quote"):                        SpecialF(cmdQuote),
	NewReserved("return-from"):                  SpecialF(cmdReturnFrom),
	NewReserved("tagbody"):                      SpecialF(cmdTagBody),
	NewReserved("the"):                          SpecialF(cmdAssure),
	NewReserved("throw"):                        Function2(funThrow),
	NewReserved("unwind-protect"):               SpecialF(cmdUnwindProtect),
	NewReserved("while"):                        SpecialF(cmdWhile),
	NewReserved("with-error-output"):            SpecialF(cmdWithErrorOutput),
	NewReserved("with-handler"):                 SpecialF(cmdWithHandler),
	NewReserved("with-open-input-file"):         SpecialF(cmdWithOpenInputFile),
	NewReserved("with-open-output-file"):        SpecialF(cmdWithOpenOutputFile),
	NewReserved("with-standard-input"):          SpecialF(cmdWithStandardInput),
	NewReserved("with-standard-output"):         SpecialF(cmdWithStandardOutput),
	NewSymbol("%make-simple-error"):             Function2(funMakeSimpleError),
	NewSymbol("%raise-domain-error"):            Function2(funRaiseDomainError),
	NewSymbol("*"):                              &Function{F: funMulti},
	NewSymbol("+"):                              &Function{F: funAdd},
	NewSymbol("-"):                              &Function{Min: 1, F: funSub},
	NewSymbol("/="):                             Function2(funNotEqual),
	NewSymbol("<"):                              &Function{C: 2, F: funLessThan},
	NewSymbol("<="):                             &Function{C: 2, F: funLessOrEqual},
	NewSymbol("="):                              Function2(funEqualOp),
	NewSymbol(">"):                              &Function{C: 2, F: funGreaterThan},
	NewSymbol(">="):                             &Function{C: 2, F: funGreaterOrEqual},
	NewSymbol("append"):                         &Function{F: funAppend},
	NewSymbol("apply"):                          SpecialF(cmdApply),
	NewSymbol("aref"):                           &Function{Min: 1, F: funAref},
	NewSymbol("arithmetic-error-operands"):      Function1(funArithmeticErrorOperands),
	NewSymbol("arithmetic-error-operation"):     Function1(funArithmeticErrorOperation),
	NewSymbol("array-dimensions"):               Function1(funArrayDimensions),
	NewSymbol("assoc"):                          Function2(funAssoc),
	NewSymbol("atan"):                           funMath1(math.Atan),
	NewSymbol("atan2"):                          Function2(funAtan2),
	NewSymbol("atanh"):                          funMath1(math.Atanh),
	NewSymbol("atom"):                           Function1(funAtom),
	NewSymbol("basic-array*-p"):                 Function1(funBasicArrayStarP),
	NewSymbol("basic-array-p"):                  Function1(funBasicArrayP),
	NewSymbol("basic-vector-p"):                 Function1(funBasicVectorP),
	NewSymbol("car"):                            Function1(funGetCar),
	NewSymbol("cdr"):                            Function1(funGetCdr),
	NewSymbol("ceiling"):                        Function1(funCeiling),
	NewSymbol("char-index"):                     &Function{Min: 2, Max: 3, F: funRuneIndex},
	NewSymbol("char/="):                         &Function{C: 2, F: funRuneNe},
	NewSymbol("char<"):                          &Function{C: 2, F: funRuneLt},
	NewSymbol("char<="):                         &Function{C: 2, F: funRuneLe},
	NewSymbol("char="):                          &Function{C: 2, F: funRuneEq},
	NewSymbol("char>"):                          &Function{C: 2, F: funRuneGt},
	NewSymbol("char>="):                         &Function{C: 2, F: funRuneGe},
	NewSymbol("characterp"):                     Function1(funAnyTypep[Rune]),
	NewSymbol("class-of"):                       Function1(funClassOf),
	NewSymbol("close"):                          Function1(funClose),
	NewSymbol("condition-continuable"):          Function1(funConditionContinuable),
	NewSymbol("cons"):                           Function2(funCons),
	NewSymbol("consp"):                          Function1(funAnyTypep[*Cons]),
	NewSymbol("continue-condition"):             &Function{Min: 1, Max: 2, F: funContinueCondition},
	NewSymbol("cos"):                            funMath1(math.Cos),
	NewSymbol("cosh"):                           funMath1(math.Cosh),
	NewSymbol("create"):                         &Function{Min: 1, F: funCreate},
	NewSymbol("create-array"):                   &Function{Min: 1, Max: 2, F: funCreateArray},
	NewSymbol("create-list"):                    &Function{Min: 1, Max: 2, F: funCreateList},
	NewSymbol("create-string"):                  &Function{Min: 1, Max: 2, F: funCreateString},
	NewSymbol("create-string-input-stream"):     Function1(funCreateStringInputStream),
	NewSymbol("create-string-output-stream"):    Function0(funCreateStringOutputStream),
	NewSymbol("create-vector"):                  &Function{Min: 1, Max: 2, F: funCreateVector},
	NewSymbol("defclass"):                       SpecialF(cmdDefClass),
	NewSymbol("defconstant"):                    SpecialF(cmdDefConstant),
	NewSymbol("defdynamic"):                     SpecialF(cmdDefDynamic),
	NewSymbol("defgeneric"):                     SpecialF(cmdDefGeneric),
	NewSymbol("defglobal"):                      SpecialF(cmdDefglobal),
	NewSymbol("defmacro"):                       SpecialF(cmdDefMacro),
	NewSymbol("defmethod"):                      SpecialF(cmdDefMethod),
	NewSymbol("defun"):                          SpecialF(cmdDefun),
	NewSymbol("div"):                            &Function{C: 2, F: funDivide},
	NewSymbol("domain-error-expected-class"):    Function1(funDomainErrorExpectedClass),
	NewSymbol("domain-error-object"):            Function1(funDomainErrorObject),
	NewSymbol("elt"):                            &Function{C: 2, F: funElt},
	NewSymbol("eq"):                             &Function{C: 2, F: funEq},
	NewSymbol("eql"):                            &Function{C: 2, F: funEql},
	NewSymbol("equal"):                          &Function{C: 2, F: funEqual},
	NewSymbol("equalp"):                         &Function{C: 2, F: funEqualp},
	NewSymbol("error-output"):                   Function0(funErrorOutput),
	NewSymbol("evenp"):                          Function1(funEvenp),
	NewSymbol("exp"):                            funMath1(math.Exp),
	NewSymbol("expand-defun"):                   SpecialF(cmdExpandDefun),
	NewSymbol("expt"):                           Function2(funExpt),
	NewSymbol("file-length"):                    Function2(funFileLength),
	NewSymbol("file-position"):                  Function1(funFilePosition),
	NewSymbol("finish-output"):                  Function1(funFinishOutput),
	NewSymbol("float"):                          Function1(funFloat),
	NewSymbol("floatp"):                         Function1(funAnyTypep[Float]),
	NewSymbol("floor"):                          Function1(funFloor),
	NewSymbol("format"):                         &Function{Min: 2, F: funFormat},
	NewSymbol("format-char"):                    &Function{C: 2, F: funFormatChar},
	NewSymbol("format-float"):                   &Function{C: 2, F: funFormatFloat},
	NewSymbol("format-fresh-line"):              Function1(funFormatFreshLine),
	NewSymbol("format-integer"):                 &Function{C: 3, F: funFormatInteger},
	NewSymbol("format-object"):                  &Function{C: 3, F: funFormatObject},
	NewSymbol("format-tab"):                     Function2(funFormatTab),
	NewSymbol("funcall"):                        SpecialF(cmdFunCall),
	NewSymbol("functionp"):                      Function1(funAnyTypep[FunctionRef]),
	NewSymbol("garef"):                          &Function{Min: 1, F: funGaref},
	NewSymbol("general-array*-p"):               Function1(funGeneralArrayStarP),
	NewSymbol("general-array-p"):                Function1(funAnyTypep[*Array]),
	NewSymbol("general-vector-p"):               Function1(funGeneralVectorP),
	NewSymbol("generic-function-p"):             Function1(funGenericFunctionP),
	NewSymbol("gensym"):                         Function0(funGensym),
	NewSymbol("get-internal-real-time"):         Function0(funInternalRealTime),
	NewSymbol("get-internal-run-time"):          Function0(funInternalRealTime),
	NewSymbol("get-output-stream-string"):       Function1(funGetOutputStreamString),
	NewSymbol("get-universal-time"):             Function0(funUniversalTime),
	NewSymbol("gmn:dump-session"):               Function0(funDumpSession),
	NewSymbol("identity"):                       Function1(funIdentity),
	NewSymbol("input-stream-p"):                 Function1(funInputStreamP),
	NewSymbol("instancep"):                      Function2(funInstanceP),
	NewSymbol("integerp"):                       Function1(funAnyTypep[Integer]),
	NewSymbol("internal-time-units-per-second"): Function0(funInternalTimeUnitPerSecond),
	NewSymbol("isqrt"):                          Function1(funIsqrt),
	NewSymbol("lambda-macro"):                   SpecialF(cmdLambdaMacro),
	NewSymbol("last"):                           Function1(funLast),
	NewSymbol("length"):                         Function1(funLength),
	NewSymbol("list"):                           &Function{F: funList},
	NewSymbol("listp"):                          Function1(funListp),
	NewSymbol("log"):                            Function1(funLog),
	NewSymbol("macroexpand"):                    Function1(funMacroExpand),
	NewSymbol("mapc"):                           &Function{Min: 2, F: funMapC},
	NewSymbol("mapcan"):                         &Function{Min: 2, F: funMapCan},
	NewSymbol("mapcar"):                         &Function{Min: 2, F: funMapCar},
	NewSymbol("mapcon"):                         &Function{Min: 2, F: funMapCon},
	NewSymbol("mapl"):                           &Function{Min: 2, F: funMapL},
	NewSymbol("maplist"):                        &Function{Min: 2, F: funMapList},
	NewSymbol("member"):                         Function2(funMember),
	NewSymbol("minusp"):                         Function1(funMinusp),
	NewSymbol("mod"):                            &Function{C: 2, F: funMod},
	NewSymbol("not"):                            Function1(funNot),
	NewSymbol("nreverse"):                       Function1(NReverse),
	NewSymbol("null"):                           Function1(funNullp),
	NewSymbol("numberp"):                        Function1(funNumberp),
	NewSymbol("oddp"):                           Function1(funOddp),
	NewSymbol("open-input-file"):                &Function{Min: 1, Max: 2, F: funOpenInputFile},
	NewSymbol("open-io-file"):                   &Function{Min: 1, Max: 2, F: funOpenIoFile},
	NewSymbol("open-output-file"):               &Function{Min: 1, Max: 2, F: funOpenOutputFile},
	NewSymbol("open-stream-p"):                  Function1(funOpenStreamP),
	NewSymbol("output-stream-p"):                Function1(funOutputStreamP),
	NewSymbol("parse-error-expected-class"):     Function1(funParseErrorExpectedClass),
	NewSymbol("parse-error-string"):             Function1(funParseErrorString),
	NewSymbol("parse-number"):                   Function1(funParseNumber),
	NewSymbol("plusp"):                          Function1(funPlusp),
	NewSymbol("preview-char"):                   &Function{Max: 3, F: funPreviewChar},
	NewSymbol("probe-file"):                     Function1(funProbeFile),
	NewSymbol("psetq"):                          SpecialF(cmdPSetq),
	NewSymbol("quasiquote"):                     SpecialF(cmdQuasiQuote),
	NewSymbol("quotient"):                       &Function{Min: 2, F: funQuotient},
	NewSymbol("read"):                           &Function{Max: 3, F: funRead},
	NewSymbol("read-byte"):                      &Function{Min: 1, Max: 3, F: funReadByte},
	NewSymbol("read-char"):                      &Function{Max: 3, F: funReadChar},
	NewSymbol("read-line"):                      &Function{Max: 3, F: funReadLine},
	NewSymbol("reciprocal"):                     Function1(funReciprocal),
	NewSymbol("rem"):                            Function2(funRem),
	NewSymbol("rest"):                           Function1(funGetCdr),
	NewSymbol("reverse"):                        Function1(funReverse),
	NewSymbol("round"):                          Function1(funRound),
	NewSymbol("set-aref"):                       &Function{Min: 2, F: funSetAref},
	NewSymbol("set-car"):                        Function2(funSetCar),
	NewSymbol("set-cdr"):                        Function2(funSetCdr),
	NewSymbol("set-file-position"):              Function2(funSetFilePosition),
	NewSymbol("set-garef"):                      &Function{Min: 2, F: funSetGaref},
	NewSymbol("setq"):                           &SpecialN{F: cmdSetq, Min: 2, Max: 2},
	NewSymbol("signal-condition"):               Function2(funSignalCondition),
	NewSymbol("simple-error-format-arguments"):  Function1(funSimpleErrorFormatArguments),
	NewSymbol("simple-error-format-string"):     Function1(funSimpleErrorFormatString),
	NewSymbol("sin"):                            funMath1(math.Sin),
	NewSymbol("sinh"):                           funMath1(math.Sinh),
	NewSymbol("sqrt"):                           Function1(funSqrt),
	NewSymbol("standard-input"):                 Function0(funStandardInput),
	NewSymbol("standard-output"):                Function0(funStandardOutput),
	NewSymbol("stream-error-stream"):            Function1(funStreamErrorStream),
	NewSymbol("stream-ready-p"):                 Function1(funStreamReadyP),
	NewSymbol("streamp"):                        Function1(funStreamP),
	NewSymbol("string-append"):                  &Function{F: funStringAppend},
	NewSymbol("string-index"):                   &Function{Min: 2, Max: 3, F: funStringIndex},
	NewSymbol("string/="):                       &Function{C: 2, F: funStringNe},
	NewSymbol("string<"):                        &Function{C: 2, F: funStringLt},
	NewSymbol("string<="):                       &Function{C: 2, F: funStringLe},
	NewSymbol("string="):                        &Function{C: 2, F: funStringEq},
	NewSymbol("string>"):                        &Function{C: 2, F: funStringGt},
	NewSymbol("string>="):                       &Function{C: 2, F: funStringGe},
	NewSymbol("stringp"):                        Function1(funAnyTypep[String]),
	NewSymbol("subclassp"):                      Function2(funSubClassP),
	NewSymbol("subseq"):                         &Function{C: 3, F: funSubSeq},
	NewSymbol("symbolp"):                        Function1(funAnyTypep[Symbol]),
	NewSymbol("tan"):                            funMath1(math.Tan),
	NewSymbol("tanh"):                           funMath1(math.Tanh),
	NewSymbol("trace"):                          SpecialF(cmdTrace),
	NewSymbol("truncate"):                       Function1(funTruncate),
	NewSymbol("undefined-entity-name"):          Function1(funUndefinedEntityName),
	NewSymbol("undefined-entity-namespace"):     Function1(funUndefinedEntityNamespace),
	NewSymbol("vector"):                         &Function{F: funVector},
	NewSymbol("with-open-io-file"):              SpecialF(cmdWithOpenIoFile),
	NewSymbol("write-byte"):                     Function2(funWriteByte),
	NewSymbol("zerop"):                          Function1(funZerop),
	symReportCondition:                          reportCondition,
	// *sort*end*
}
